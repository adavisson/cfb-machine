{"version":3,"sources":["logo.svg","components/MatchupResults.js","components/MatchHistory.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MatchupResults","props","useState","matchup","setMatchup","loaded","setLoaded","useEffect","a","async","fetch","team1","team2","result","json","data","console","log","fetchData","className","team1Wins","team2Wins","ties","games","map","game","season","winner","awayTeam","awayScore","homeScore","homeTeam","venue","MatchHistory","teams","setTeams","setTeam1","setTeam2","isSubmitted","setIsSubmitted","school","handleChange1","e","target","value","handleChange2","handleSubmit","preventDefault","handleClick","Form","onSubmit","Group","controlId","Label","Control","as","onChange","team","key","id","mascot","Button","variant","type","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ff3c17c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react';\n\nconst MatchupResults = (props) => {\n  const [matchup, setMatchup] = useState({});\n  const [loaded, setLoaded] = useState(false);\n  \n  useEffect(() => {\n    const fetchData = async() => {\n      const result = await fetch(`https://api.collegefootballdata.com/teams/matchup?team1=${props.team1}&team2=${props.team2}`)\n      const data = await result.json();\n      console.log(data)\n      setMatchup(data);\n      setLoaded(true);\n    }\n    fetchData();\n  }, [])\n\n  return (\n    <div className=\"matchups\">\n      <h3>Results</h3>\n      <p>Wins for {props.team1}: {matchup.team1Wins}</p>\n      <p>Wins for {props.team2}: {matchup.team2Wins}</p>\n      <p>Ties: {matchup.ties}</p>\n      {!!loaded && matchup.games.map(game => {\n        return(\n          <div className=\"game\">\n            <h5>{game.season}</h5>\n            <p>Winner: {game.winner}</p>\n            <p>Score: {game.awayTeam} {game.awayScore} - {game.homeScore} {game.homeTeam}</p>\n            <p>Venue: {game.venue ? game.venue : 'N/A'}</p>\n          </div>\n        )\n      })}\n      {console.log(matchup.games)}\n    </div>\n  );\n}\n \nexport default MatchupResults;","import React, { useState, useEffect } from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport MatchupResults from './MatchupResults';\n\nconst MatchHistory = () => {\n  const [teams, setTeams] = useState([]);\n  const [team1, setTeam1] = useState('');\n  const [team2, setTeam2] = useState('');\n  const [isSubmitted, setIsSubmitted] = useState(false);\n    \n  useEffect(() => {\n    const fetchData = async() => {\n      const result = await fetch('https://api.collegefootballdata.com/teams/fbs');\n      const data = await result.json();\n      setTeams(data);\n      setTeam1(data[0].school);\n      setTeam2(data[0].school);\n    }\n    fetchData();\n  }, []);\n\n  const handleChange1 = (e) => {\n    setTeam1(e.target.value);\n  }\n\n  const handleChange2 = (e) => {\n    setTeam2(e.target.value);\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setIsSubmitted(true);\n  }\n\n  const rendferForm = () => {\n    return (\n      <Form onSubmit={handleSubmit}>\n        <Form.Group controlId=\"team.ControlSelect1\">\n          <Form.Label>First Team</Form.Label>\n          <Form.Control as=\"select\" onChange={handleChange1}>\n            {teams.map(team => {\n              return (<option key={'1_' + team.id} value={team.school}>{team.school} {team.mascot}</option>)\n            })}\n          </Form.Control>\n        </Form.Group>\n        <Form.Group controlId=\"team.ControlSelect2\">\n          <Form.Label>Second Team</Form.Label>\n          <Form.Control as=\"select\" onChange={handleChange2}>\n            {teams.map(team => {\n              return (<option key={'2_' + team.id} value={team.school}>{team.school} {team.mascot}</option>)\n            })}\n          </Form.Control>\n        </Form.Group>\n        <Button variant=\"primary\" type=\"submit\">\n          Submit\n        </Button> \n      </Form>\n    )\n  }\n\n  const handleClick = () => {\n    setIsSubmitted(false);\n  }\n\n  const renderResults = () => {\n    return (\n      <>\n        <Button onClick={handleClick}>Change Teams</Button>\n        <MatchupResults team1={team1} team2={team2} />\n      </>\n    )\n  }\n\n  return (\n    <div className=\"component\">\n      {!isSubmitted && <p>Select two teams to see results of all of the games they have played against each other.</p>}\n      {!isSubmitted && rendferForm()}\n      {isSubmitted && renderResults()}\n    </div>\n  );\n}\n \nexport default MatchHistory;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MatchHistory from './components/MatchHistory';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>CFB Machine</h1>\n      <MatchHistory />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}